/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package neuroverkko;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import javafx.application.Application;
import javafx.event.Event;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import neuroverkko.Utils.Viz.*;

import neuroverkko.Math.ActivationFunctions.Identity;
import neuroverkko.Math.ActivationFunctions.LeakyReLu;
import neuroverkko.Math.ActivationFunctions.Sigmoid;
import neuroverkko.Math.ActivationFunctions.Softplus;
import neuroverkko.Math.ActivationFunctions.Softmax;
import neuroverkko.Math.CostFunctions.CrossEntropy;
import neuroverkko.Math.CostFunctions.MSE;
import neuroverkko.Math.CostFunctions.Quadratic;
import neuroverkko.Math.Optimizers.GradientDescent;
import neuroverkko.Math.Optimizers.Momentum;
import neuroverkko.Utils.ImageUtils;
import neuroverkko.Utils.MnistReader;
import neuroverkko.Neuroverkko.*;
import neuroverkko.Utils.DataStructures.Map.Pair;
import neuroverkko.Math.Matrix;




public class App extends Application {
    static SimppeliNakyma sm;
    NeuralNetwork nn;
    //extends Application {


    // @Override
    // public void start(Stage stage) {
    //     // Luokkaa Random käytetään nopan heittojen arpomiseen
    //     Random arpoja = new Random();

    //     NumberAxis xAkseli = new NumberAxis();
    //     // y-akseli kuvaa nopanheittojen keskiarvoa. Keskiarvo on aina välillä [1-6]
    //     NumberAxis yAkseli = new NumberAxis(1, 6, 1);

    //     LineChart<Number, Number> viivakaavio = new LineChart<>(xAkseli, yAkseli);
    //     // kaaviosta poistetaan mm. pisteisiin liittyvät ympyrät
    //     viivakaavio.setLegendVisible(false);
    //     viivakaavio.setAnimated(false);
    //     viivakaavio.setCreateSymbols(false);

    //     // luodaan dataa kuvaava muuttuja ja lisätään se kaavioon
    //     XYChart.Series keskiarvo = new XYChart.Series();
    //     viivakaavio.getData().add(keskiarvo);

    //     new AnimationTimer() {
    //         private long edellinen;
    //         private long summa;
    //         private long lukuja;

    //         @Override
    //         public void handle(long nykyhetki) {
    //             if (nykyhetki - edellinen < 100_000_000L) {
    //                 return;
    //             }

    //             edellinen = nykyhetki;

    //             // heitetään noppaa
    //             int luku = arpoja.nextInt(6) + 1;

    //             // kasvatetaan summaa ja lukujen määrää
    //             summa += luku;
    //             lukuja++;

    //             // lisätään dataan uusi piste
    //             keskiarvo.getData().add(new XYChart.Data(lukuja, 1.0 * summa / lukuja));
    //         }
    //     }.start();

    //     Scene nakyma = new Scene(viivakaavio, 400, 300);
    //     stage.setScene(nakyma);
    //     stage.show();
    // }

    // @Override 
    // public void start(Stage stage) {
    //    //Defining the x axis             
    //    NumberAxis xAxis = new NumberAxis(1960, 2020, 10); 
    //    xAxis.setLabel("Years"); 
         
    //    //Defining the y axis   
    //    NumberAxis yAxis = new NumberAxis   (0, 350, 50); 
    //    yAxis.setLabel("No.of schools"); 
         
    //    //Creating the line chart 
    //    LineChart linechart = new LineChart(xAxis, yAxis);  
         
    //    //Prepare XYChart.Series objects by setting data 
    //    XYChart.Series series = new XYChart.Series(); 
    //    series.setName("No of schools in an year"); 
         
    //    series.getData().add(new XYChart.Data(1970, 15)); 
    //    series.getData().add(new XYChart.Data(1980, 30)); 
    //    series.getData().add(new XYChart.Data(1990, 60)); 
    //    series.getData().add(new XYChart.Data(2000, 120)); 
    //    series.getData().add(new XYChart.Data(2013, 240)); 
    //    series.getData().add(new XYChart.Data(2014, 300)); 
             
    //    //Setting the data to Line chart    
    //    linechart.getData().add(series);        
         
    //    //Creating a Group object  
    //    Group root = new Group(linechart); 
          
    //    //Creating a scene object 
    //    Scene scene = new Scene(root, 600, 400);  
       
    //    //Setting title to the Stage 
    //    stage.setTitle("Line Chart"); 
          
    //    //Adding scene to the stage 
    //    stage.setScene(scene);
        
    //    //Displaying the contents of the stage 
    //    stage.show();         
    // }   
 
    public String getGreeting() {
        return "Hello World!";
    }


    // public void start(Stage stage) {
    //     stage.setTitle("Line Chart Sample");
    //     //defining the axes
    //     final NumberAxis xAxis = new NumberAxis();
    //     final NumberAxis yAxis = new NumberAxis();
    //     xAxis.setLabel("Number of Month");
    //     //creating the chart
    //     final LineChart<Number,Number> lineChart = 
    //             new LineChart<Number,Number>(xAxis,yAxis);
                
    //     lineChart.setTitle("Stock Monitoring, 2010");
    //     //defining a series
    //     XYChart.Series series = new XYChart.Series();
    //     series.setName("My portfolio");
    //     //populating the series with data
    //     series.getData().add(new XYChart.Data(1, 23));
    //     series.getData().add(new XYChart.Data(2, 14));
    //     series.getData().add(new XYChart.Data(3, 15));
    //     series.getData().add(new XYChart.Data(4, 24));
    //     series.getData().add(new XYChart.Data(5, 34));
    //     series.getData().add(new XYChart.Data(6, 36));
    //     series.getData().add(new XYChart.Data(7, 22));
    //     series.getData().add(new XYChart.Data(8, 45));
    //     series.getData().add(new XYChart.Data(9, 43));
    //     series.getData().add(new XYChart.Data(10, 17));
    //     series.getData().add(new XYChart.Data(11, 29));
    //     series.getData().add(new XYChart.Data(12, 25));
        
    //     Scene scene  = new Scene(lineChart,800,600);
    //     lineChart.getData().add(series);
       
    //     stage.setScene(scene);
    //     stage.show();
    // }

    public static void printf(String format, Object... args) {
		System.out.printf(format, args);
	}

    // @Override public void start(Stage stage) {
    //     stage.setTitle("Line Chart Sample");
    //     final CategoryAxis xAxis = new CategoryAxis();
    //     final NumberAxis yAxis = new NumberAxis();
    //     xAxis.setLabel("Month");       
        
    //     final LineChart<String,Number> lineChart = 
    //             new LineChart<String,Number>(xAxis,yAxis);
                
    //     lineChart.setTitle("Stock Monitoring, 2010");
                                
    //     XYChart.Series series = new XYChart.Series();
    //     series.setName("My portfolio");
        
    //     series.getData().add(new XYChart.Data("Jan", 23));
    //     series.getData().add(new XYChart.Data("Feb", 14));
    //     series.getData().add(new XYChart.Data("Mar", 15));
    //     series.getData().add(new XYChart.Data("Apr", 24));
    //     series.getData().add(new XYChart.Data("May", 34));
    //     series.getData().add(new XYChart.Data("Jun", 36));
    //     series.getData().add(new XYChart.Data("Jul", 22));
    //     series.getData().add(new XYChart.Data("Aug", 45));
    //     series.getData().add(new XYChart.Data("Sep", 43));
    //     series.getData().add(new XYChart.Data("Oct", 17));
    //     series.getData().add(new XYChart.Data("Nov", 29));
    //     series.getData().add(new XYChart.Data("Dec", 25));
    
        
        

        
    //     Scene scene  = new Scene(lineChart,800,600);
    //     lineChart.getData().add(series);
       
    //     stage.setScene(scene);
    //     stage.show();
    // }

    @Override
    public void start(Stage window) throws Exception {
        BorderPane asettelu = new BorderPane();

        // Valikko
        HBox valikko = new HBox();
	    valikko.setPadding(new Insets(20, 20, 20, 20));
        valikko.setSpacing(10);

        Button nappi = new Button("Nappi 1");
        Button nappi2 = new Button("Nappi 2");

        // Lisätään napit
        valikko.getChildren().addAll(nappi, nappi2);
        asettelu.setTop(valikko);


        asettelu.setCenter(sm.getChart());
        
        // Päänäkymän luominen
        Scene view = new Scene(asettelu, 400, 300);

        window.setScene(view);
        window.show();
    }

    public static void main(String[] args) throws IOException {

        NeuralNetwork3 nn2 = new NeuralNetwork3();
        nn2.setCostFunction(new Quadratic());

        Layer3 input3 = new Layer3(2, "i1", new Identity());

        Layer3 l22 = new Layer3(1, "o22", new Sigmoid());

        Layer3 l21 = new Layer3(3, "l21", new Sigmoid());

        input3.setNextLayer(l21);
        l21.setWeightsFromMatrix(new double[][] {{0.05, 0.06}, {0.07, 0.08}, {0.09, 0.10}});
        l21.setBias(0.2);
        l21.printWeights();
        l21.setNextLayer(l22);
        l22.setWeightsFromMatrix(new double[][] {{0.11},{0.12},{0.13}});
        l22.setBias(0.25);
        l22.printWeights();

        nn2.addLayer(input3);
        nn2.addLayer(l21);
        nn2.addLayer(l22);

        // nn2.feedInput(double[] {});


        /// NeuralNetwork3 ^
        
        // sm = new SimppeliNakyma();
        NeuralNetwork nn = new NeuralNetwork(3, 10, 784);
        // nn.setSm(sm);

        ArrayList<Layer> layers = new ArrayList<>();
        Layer input = new Layer(784, new Identity(), 0.0);
        Layer hidden = new Layer(50, new LeakyReLu(), new GradientDescent(0.01), 0.20);
        Layer hidden2 = new Layer(40, new Sigmoid(), new GradientDescent(0.01), 0.20);
        Layer hidden3 = new Layer(30, new Sigmoid(), new GradientDescent(0.01), 0.20);
        Layer output = new Layer(10, new Softplus(), new GradientDescent(0.01), 0.25);

        nn.addLayer(input);
        nn.addLayer(hidden);
        nn.addLayer(hidden2);
        nn.addLayer(hidden3);
        nn.addLayer(output);

        nn.setWeightsUniformly();

        nn.setCostFunction(new CrossEntropy());
        nn.setOptimizer(new Momentum(0.01));
        nn.setL2(0.05);

        // try {
        //     nn.readDatasets();
        // } catch (Exception e) {

        // }

        // Thread t = new Thread(nn);
        // t.start();
        // nn.learnFromDataset(30, 10, 0.1, 0.1);

        // launch(App.class);
        
        
        // NeuralNetwork nn = new NeuralNetwork(3, 10, 784);

        // ArrayList<Layer> layers = new ArrayList<>();
        // Layer input = new Layer(784, new Identity(), 0.0);
        // Layer hidden = new Layer(50, new LeakyReLu(), new GradientDescent(0.03), 0.20);
        // Layer hidden2 = new Layer(40, new Sigmoid(), new GradientDescent(0.03), 0.20);
        // Layer hidden3 = new Layer(30, new Sigmoid(), new GradientDescent(0.03), 0.20);
        // Layer output = new Layer(10, new Softplus(), new GradientDescent(0.03), 0.25);

        // nn.addLayer(input);
        // nn.addLayer(hidden);
        // nn.addLayer(hidden2);
        // nn.addLayer(hidden3);
        // nn.addLayer(output);

        // nn.setWeightsUniformly();

        // nn.setCostFunction(new CrossEntropy());
        // nn.setOptimizer(new Momentum(0.15));
        // nn.setL2(0.01);


        // // ///// TÄYSIN TOIMIVA VAIHTOEHTO
        double[][] kuvat = new double[60_000][784];
        double[] numero = new double[60_000];

        try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_train.csv"))) {
            String line;
            int indeksi = 0;
            while ((line = br.readLine()) != null) {
                double[] kuva = new double[784];
                String[] values = line.split(",");

                if (indeksi != 0) {
                    // Stream to array but skip first, which is label
                    numero[indeksi] = Double.parseDouble(values[0]);
                    kuvat[indeksi] = Arrays.stream(values).skip(1).mapToDouble(Double::valueOf).map(a -> a/255.0).toArray();
                }

                indeksi++;
            }
        }

        double[][] kuvat_test = new double[10_000][784];
        double[] numero_test = new double[10_000];

        try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_test.csv"))) {
            String line;
            int indeksi = 0;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");

                double[] kuva = new double[784];

                if (indeksi != 0) {
                    // Stream to array but skip first, which is label
                    numero_test[indeksi] = Double.parseDouble(values[0]);
                    kuvat_test[indeksi] = Arrays.stream(values).skip(1).mapToDouble(Double::valueOf).map(a -> a/255.0).toArray();
                }
                indeksi++;
            }
        }

        // for (int i = 0; i < numero_test.length; i++) {
        //     if (numero[i] > 0) {
        //         numero[i] = 1.0;
        //     }
        // }

        
        // nn.learnFromDataset(scaledImages, 30, 10, 0.1, labels_d, kuvat_test, numero_test, 0.1);

        
        // launch(App.class);
        // Thread smt = new Thread(new SimppeliNakyma());
        // smt.start();
        // t.start(SimppeliNakyma.class);

        int[] labels = MnistReader.getLabels(Paths.get("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/MNIST/train-labels-idx1-ubyte.gz"));
        List<int[][]> images = MnistReader.getImages(Paths.get("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data//MNIST/train-images-idx3-ubyte.gz"));
        int[] labels_expanded = new int[labels.length*2];
        labels_expanded = nn.fillFrom(labels, labels_expanded);

        double[] labels_d = Arrays.stream(labels).mapToDouble(Double::valueOf).toArray();
        double[][] scaledImages = new double[images.size()*2][];
        for (int i = 0; i < images.size(); i++) {
            scaledImages[i] = nn.scale(nn.flattenImages(images.get(i)));
        }

        // Apply one of the operations to each of the images. Which
        // operation is done is "randomly" chosen.
        for (int i = 0; i < images.size(); i++) {
            int randomNum = ThreadLocalRandom.current().nextInt(1, 4 + 1);
            int[][] image = images.get(i);

            switch (randomNum) {
                case 1:
                    scaledImages[images.size()+i] = nn.scale(nn.flattenImages(ImageUtils.moveRight(image)));
                    labels_expanded[labels.length+i] = labels[i];
                case 2:
                    scaledImages[images.size()+i] = nn.scale(nn.flattenImages(ImageUtils.moveDown(image)));
                    labels_expanded[labels.length+i] = labels[i];

                case 3:
                    scaledImages[images.size()+i] = nn.scale(nn.flattenImages(ImageUtils.moveLeft(image)));
                    labels_expanded[labels.length+i] = labels[i];

                case 4:
                    scaledImages[images.size()+i] = nn.scale(nn.flattenImages(ImageUtils.moveUp(image)));
                    labels_expanded[labels.length+i] = labels[i];    
            }
        }
        images = null;
        labels = null;
        double[] labels_expanded_d = Arrays.stream(labels_expanded).mapToDouble(Double::valueOf).toArray();

        System.out.println("labels expanded pituus lopussa: " + labels_expanded.length);

        // Test set
        // int[] labels_validation = MnistReader.getLabels(Paths.get("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/MNIST/t10k-labels-idx1-ubyte.gz"));
        // List<int[][]> images_validation = MnistReader.getImages(Paths.get("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data//MNIST/t10k-images-idx3-ubyte.gz"));

        // double[] labels_d_validation = Arrays.stream(labels_validation).mapToDouble(Double::valueOf).toArray();
        // double[][] scaledImages_validation = new double[images_validation.size()][];
        // for (int i = 0; i < images_validation.size()/2; i++) {
        //     scaledImages_validation[i] = nn.scale(nn.flattenImages(images_validation.get(i)));
        // }
        // images_validation = null;
        // labels_validation = null;
        // try {
        //     // nn.readSmallerDatasets();
        // } catch (Exception e) {

        // // }

        // double[][] kuvat = new double[60_000][784];
        // double[] numero = new double[60_000];

        // try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_train.csv"))) {
        //     String line;
        //     int indeksi = 0;
        //     while ((line = br.readLine()) != null) {
        //         double[] kuva = new double[784];
        //         String[] values = line.split(",");

        //         if (indeksi != 0) {
        //             // Stream to array but skip first, which is label
        //             numero[indeksi] = Double.parseDouble(values[0]);
        //             kuvat[indeksi] = Arrays.stream(values).skip(1).mapToDouble(Double::valueOf).map(a -> a/255.0).toArray();
        //         }

        //         indeksi++;
        //     }
        // }

        // this.scaledImages = kuvat;
        // this.labels_expanded_d = numero;

        // double[][] kuvat_val = new double[10_000][784];
        // this.labels_d_validation = new double[10_000];

        double[][] kuvatTest = new double[10_000][784];
        double[] numeroTest = new double[10_000];

        try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_test.csv"))) {
            String line;
            int indeksi = 0;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");

                double[] kuva = new double[784];

                if (indeksi != 0) {
                    // Stream to array but skip first, which is label
                    numeroTest[indeksi] = Double.parseDouble(values[0]);
                    kuvatTest[indeksi] = Arrays.stream(values).skip(1).mapToDouble(Double::valueOf).map(a -> a/255.0).toArray();
                }
                indeksi++;
            }
        }
        
        // nn.learnFromDataset(scaledImages, 30, 10, 0.1, labels_d, kuvatTest, numeroTest, 0.1);

        nn.setDropout();
        // nn.learnFromDataset(scaledImages, 30, 10, 0.01, labels_d, kuvatTest, numeroTest, 0.1);
        nn.SGD(scaledImages, 30, 10, 0.1, labels_d, kuvatTest, numeroTest, 0.5);
        

        
    }
}
