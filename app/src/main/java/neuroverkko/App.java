/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package neuroverkko;
import neuroverkko.Neuroverkko.*;
import neuroverkko.Neuroverkko.NeuralNetwork.NNBuilder;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import neuroverkko.Math.ActivationFunctions.*;


//import jdk.javadoc.internal.doclets.formats.html.SourceToHTMLConverter;
import neuroverkko.Math.ActivationFunctions.IActivationFunction;
import neuroverkko.Math.ActivationFunctions.*;
// import neuroverkko.Math.ActivationFunctions;
import neuroverkko.Math.ActivationFunctions.SigmoidDouble;
import neuroverkko.Math.ActivationFunctions.LeakyReLu;
import neuroverkko.Math.*;
import neuroverkko.Math.CostFunctions.*;
import neuroverkko.Math.Optimizers.*;


// import org.deeplearning4j.datasets.iterator.DataSetIterator;
// import org.deeplearning4j.datasets.iterator.impl.*;
// import org.nd4j.linalg.api.ndarray.INDArray;
// import org.nd4j.linalg.dataset.DataSet;
// import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
// import org.deeplearning4j.datasets.iterator.BaseDatasetIterator;
// import org.deeplearning4j.datasets.iterator.;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.function.Consumer;

import neuroverkko.Utils.Data.MNIST_reader.MNISTCompressedReader;
import neuroverkko.Utils.Data.MNIST_reader.MNISTEntry;
// import neuroverkko.Utils.Data.MNIST_reader.*;
import neuroverkko.Utils.Data.MNIST_reader.MNISTReader;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void printf(String format, Object... args) {
		System.out.printf(format, args);
	}

    public static void main(String[] args) throws IOException {
        // NeuralNetwork nn3 = new NeuralNetwork(3, 1, 2);
        // nn3.setCostFunction(new MSE());

        // SigmoidDouble s = new SigmoidDouble(1.0);
        // //IActivationFunction s = new Sigmoid();
        // // System.out.println(s.calculate(10));

        // // nn.addLayer(new Sigmoid(), 3, 0.2);
        // // Layer i3 = new Layer3(2, "i1", new Identity());

        // // Layer l223 = new Layer3(1, "o22", new Sigmoid());

        // // Layer3 l213 = new Layer3(3, "l21", new Sigmoid());

        // Layer input3 = new Layer(2, new Identity(), 0.0);
        // Layer hidden3 = new Layer(3, new Sigmoid(), new GradientDescent(0.03), 0.20);
        // Layer output3 = new Layer(1, new Sigmoid(), new GradientDescent(0.02), 0.25);
        // // int nodes, ActivationFunction actFnc, Optimizer opt, double bias) 

        // hidden3.setPrevLayer(input3);
        // output3.setPrevLayer(hidden3);
        // hidden3.setWeights(new Matrix(new double[][] {{0.05, 0.06}, {0.07, 0.08}, {0.09, 0.10}}));
        // hidden3.setInitialBias(0.2);
        // // System.out.println("l21 painot: ");
        // System.out.println("Hidden paino:" + hidden3.getWeights().toString());
        // output3.setWeights(new Matrix(new double[][] {{0.11},{0.12},{0.13}}));

        // output3.setInitialBias(0.25);
        // // System.out.println("l22 painot");

        // nn3.addLayer(input3);
        // nn3.addLayer(hidden3);
        // nn3.addLayer(output3);

        // nn3.feedInput(new Matrix(new double[][] {{0.1}, {0.2}}));

        // nn3.insertHomework(new Matrix(new double[][] {{0.1}, {0.2}}), new Matrix(new double[][] {{0.8}}));


        ////////
        // ActivationFunction ce = new CrossEntropy();


        NeuralNetwork nn = new NeuralNetwork(3, 10, 784);
        ArrayList<Layer> layers = new ArrayList<>();
        Layer input = new Layer(784, new Identity(), 0.0);
        
        Layer hidden = new Layer(30, new Sigmoid(), new GradientDescent(0.5), 0.20);
        Layer output = new Layer(10, new Sigmoid(), new GradientDescent(0.5), 0.25);
        nn.setL2(5.0);

    //     try {
    //         String url = "http://127.0.0.1:5000/training_data"; //"http://api.ipinfodb.com/v3/ip-city/?key=d64fcfdfacc213c7ddf4ef911dfe97b55e4696be3532bf8302876c09ebd06b&ip=74.125.45.100&format=json";
    //         URL obj = new URL(url);
    //         HttpURLConnection con = (HttpURLConnection) obj.openConnection();
    //         // optional default is GET
    //         //  Gson g = new Gson();
    //         con.setRequestMethod("GET");
    //         //add request header
    //         con.setRequestProperty("User-Agent", "Mozilla/5.0");
    //         int responseCode = con.getResponseCode();
    //         System.out.println("\nSending 'GET' request to URL : " + url);
    //         System.out.println("Response Code : " + responseCode);
    //         BufferedReader in = new BufferedReader(
    //                 new InputStreamReader(con.getInputStream()));
    //         String inputLine;
    //         StringBuffer response = new StringBuffer();
    //         while ((inputLine = in.readLine()) != null) {
    //             response.append(inputLine);
    //     }
    //  in.close();
    //  //print in String
    //  System.out.println("Api response");
    //  System.out.println(response.toString());
    
     //Read JSON response and print
    // ONObject myResponse = new JSONObject(response.toString())
    //  System.out.println("result after Reading JSON Response");
    //  System.out.println("statusCode- "+myResponse.getString("statusCode"));
    //  System.out.println("statusMessage- "+myResponse.getString("statusMessage"));
    //  System.out.println("ipAddress- "+myResponse.getString("ipAddress"));
    //  System.out.println("countryCode- "+myResponse.getString("countryCode"));
    //  System.out.println("countryName- "+myResponse.getString("countryName"));
    //  System.out.println("regionName- "+myResponse.getString("regionName"));
    //  System.out.println("cityName- "+myResponse.getString("cityName"));
    //  System.out.println("zipCode- "+myResponse.getString("zipCode"));
    //  System.out.println("latitude- "+myResponse.getString("latitude"));
    //  System.out.println("longitude- "+myResponse.getString("longitude"));
    //  System.out.println("timeZone- "+myResponse.getString("timeZone"));  

    // } catch (Exception e) {
    //     System.out.println(e);
    // }

        hidden.setPrevLayer(input);
        output.setPrevLayer(hidden);

        nn.addLayer(input);
        nn.addLayer(hidden);

        nn.addLayer(output);

        nn.setWeightsUniformly();


        
        // nn.addLayer(new Layer(784, new Identity(), 0.0));
        // nn.addLayer(new Layer(30, new Sigmoid(), 0.20));
        // //nn.layers.get(nn.layers.size()-1).setPrevLayer(nn.layers.get(nn.layers.size()-2));
        // nn.addLayer(new Layer(10, new Sigmoid(), 0.25));
        //nn.layers.get(nn.layers.size()-1).setPrevLayer(nn.layers.get(nn.layers.size()-2));

        //nn.setLayers(layers);

        //nn.layers = (ArrayList<Layer>) layers;
        
        
        
        // for (int i = 1; i < nn.layers.size(); i++) {
        //     //nn.layers.get(i).setPrevLayer(nn.layers.get(i-1));
        //     //nn.layers.get(i).setPrevLayer(nn.layers.get(i-1));
        //     nn.layers.get(i).setInitialWeightsRand();
        //     nn.layers.get(i).setInitialBias(0.2);
        // }


        
        nn.setCostFunction(new CrossEntropy());
        nn.setOptimizer(new GradientDescent(0.02));
        nn.setL2(0.5);
        // nn.setInitialWeights();


        
        // nn.initializeLayers();




        // NeuralNetwork.NNBuilder nnb = new NeuralNetwork.NNBuilder(3, 10, 784);

        // List<Layer> layers = new ArrayList<>();
        // layers.add(new Layer(784, new Identity(), 0.0));
        // layers.add(new Layer(30, new Sigmoid(), 0.20));
        // layers.add(new Layer(10, new Sigmoid(), 0.25));

        // for (int i = 1; i < layers.size(); i++) {
        //     layers.get(i).setPrevLayer(layers.get(i-1));
        //     layers.get(i).setInitialWeightsRand();
        // }


        // nnb.addLayer(new Layer(784, new Identity(), 0.0));
        // nnb.addLayer(new Layer(30, new Sigmoid(), 0.20));
        // nnb.addLayer(new Layer(10, new Sigmoid(), 0.25));
        // nnb.initializeLayers(layers);
        // nnb.setInitialWeights();
        // nnb.setCostFunction(new MSE());
        // nnb.setOptimizer(new GradientDescent(0.01));
        // nnb.setL2(0.0002);
        // nnb.setInitialWeights();
        // nnb.initializeLayers();

        // NeuralNetwork nn = nnb.create();
        // for (Layer l: layers) {
        //     nn.addLayer(l);
        //     if (nn.layers.size() > 0) {
        //         nn.addLayer(l);
        //         nn.layers.get(nn.layers.size()-1).setPrevLayer(nn.layers.get(nn.layers.size()-2));
        //         nn.layers.get(nn.layers.size()-1).setInitialWeightsRand();

        //     }
            
        // }

        // nn.initializeLayers(layers);

        // for (int i = 0; i < nn.layers.size(); i++) {
        //     Layer l = nn.layers.get(i);
        //     if (i > 0) {
        //         nn.layers.get(i).setWeights(new Matrix(new double[nn.layers.get(i-1).numberOfNodes][l.numberOfNodes]));
        //     }
            
        //     System.out.println("l.size(): " + l.getSize());
        //     System.out.println("l.bias size: " + l.getBias().getDimensions());
        //     System.out.println("l weights size: (" + l.getWeights().rows + ", " + l.getWeights().cols + ")");
        //     System.out.println("output: " + l.getOutput());
        //     System.out.println("");
            
        // }
        

        //nn.layers.size

        //// TAITAA TOIMIA

        // String LABEL_FILE = "/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/t10k-labels.idx1-ubyte";
		// String IMAGE_FILE = "/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/t10k-images.idx3-ubyte";

		// int[] labels = MNISTReader.getLabels(LABEL_FILE);
		// List<int[][]> images = MNISTReader.getImages(IMAGE_FILE);
        // System.out.println("Labels: " + Arrays.toString(labels));
        // System.out.println(Arrays.toString(images.get(0)));

        // double[] image = new double[785];
        // List<double[]> kuvii = new ArrayList<>();
        // for (int i = 0; i < images.size()*0.01; i++) {
        //     for (int j = 0; j < images.get(i).length; j++) {
        //         for (int k = 0; k < images.get(i)[j].length; k++) {
        //             // System.out.println(images.get(i)[j][k]);
        //             image[k] = Double.valueOf(images.get(i)[j][k]);
        //             //System.out.print(images.get(i)[j][k] + " ");
        //         }
        //         kuvii.add(image);
        //         //System.out.println("");

        //     }
        // }
        // System.out.println(Arrays.toString(kuvii.get(0)));
        //////////////


        //ByteBuffer bb = MNISTReader.loadFileToByteBuffer("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/t10k-images.idx3-ubyte");

        
        // Number tuntuu toimivan!
        //int[] number = MNISTReader.readRow(784, bb);


        // System.out.println("Number array");
        
        // System.out.println(Arrays.toString(kuvii.get(1)[0]));

        List<List<String>> records = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_train_final.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                records.add(Arrays.asList(values));
            }
        }
        
        List<double[]> recordsValues = new ArrayList<>();
        List<Double> validValues = new ArrayList<>();
        for (int i = 1; i < records.size(); i++) {
            double[] kuva = new double[784];
            for (int j = 0; j < records.get(i).size(); j++) {
                double value = Double.parseDouble(records.get(i).get(j));
                if (j == 0) {
                    validValues.add(value);
                } else {
                    kuva[j-1] = value;
                }

            }
            recordsValues.add(kuva);
        }

        for (int i = 0; i < recordsValues.size(); i++) {
            for (int j = 0; j < recordsValues.get(i).length; j++) {
                recordsValues.get(i)[j] = recordsValues.get(i)[j]/255.0;
            }
        }

        System.out.println("Records values ekan pituus" + recordsValues.get(0).length);
        // recordsValues.get(-1);



        records = null;



        List<List<String>> recordsTest = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data/mnist_test.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                recordsTest.add(Arrays.asList(values));
            }
        }

        // recordsTest recordsTestValues
        
        List<double[]> recordsTestValues = new ArrayList<>();
        List<Double> validTestValues = new ArrayList<>();
        for (int i = 1; i < recordsTest.size(); i++) {
            double[] kuva = new double[784];
            for (int j = 0; j < recordsTest.get(i).size(); j++) {
                double value = Double.parseDouble(recordsTest.get(i).get(j));
                if (j == 0) {
                    validTestValues.add(value);
                } else {
                    kuva[j-1] = value;
                }

            }
            recordsTestValues.add(kuva);
        }

        for (int i = 0; i < recordsTestValues.size(); i++) {
            for (int j = 0; j < recordsTestValues.get(i).length; j++) {
                recordsTestValues.get(i)[j] = recordsTestValues.get(i)[j]/255.0;
            }
        }

        System.out.println("RecordsTestValues: ");

        // System.out.println("Records values ekan pituus" + recordsValues.get(0).length);
        // recordsValues.get(-1);
        recordsTest = null;
        records = null;




        




        // System.out.println(Arrays.toString(number));
        // public static int[] readRow(int numColumns, ByteBuffer bb) {
        //     int[] row = new int[numColumns];
    
        //     for (int col = 0; col < numColumns; col++) {
        //         row[col] = bb.get() & 0xFF;
        //     }
    
        //     return row;
        // }
		
		//assertEquals(labels.length, images.size());
		//assertEquals(28, images.get(0).length);
		//assertEquals(28, images.get(0)[0].length);
        

        // int[][] single_image =new int[1][748];

		// for (int i = 0; i < Math.min(10, labels.length); i++) {
		// 	printf("================= LABEL %d\n", labels[i]);
        //     single_image = images.get(i).clone();
        //     // MNISTReader.readImage(1, 748);
		// 	printf("%s", MNISTReader.renderImage(images.get(i)));
		// }

        // System.out.println(Arrays.toString(single_image[0]));
        // Path inputDirectoryPath = Paths.get("/home/ari/ohjelmointi/tiralabraa/uusi/app/src/main/java/neuroverkko/data");

        // // System.out.println(inputDirectoryPath.toString());
        // // //inputDirectoryPath.toAbsolutePath('/home/ari/')
        // MNISTCompressedReader mnistreader = new MNISTCompressedReader();
        // Consumer<MNISTEntry> consumer = System.out::println;

        // // System.out.println("Training data:");
        // mnistreader.readCompressedTraining(inputDirectoryPath, consumer);

        // // System.out.println("Testing data:");
        // mnistreader.readCompressedTesting(inputDirectoryPath, consumer);

        // mnistreader.readCompressedTesting(inputDirectoryPath, consumer);
        // /////////////////////////////

        

        // System.out.println(records.toString());
        // // List<double[][]> images = new ArrayList<>();
        
        
        // // //double[][] image = new double[784][1];
        // // int laskuri = 0;
        // // double[][] image = new double[100][784];

        // ArrayList<List<Double>> kuvia = new ArrayList<>();
        // ArrayList<Double> kuvat = new ArrayList<>();

        // for (int i = 1; i < 100; i++) {
        //     // System.out.println(records.get(i).size()
        //     //double[][] image = new double[785][785];
        //     // records.get(i).stream().forEach(a -> System.out.println(a));
        //     // records.get(i).stream().forEach(a -> kuvat.add(Double.parseDouble(a)));

        //     kuvia.add(kuvat);
        //     for (int j=1; j < records.get(i).size(); j++) {
        //         System.out.println(records.get(i).get(j));
        //         String s = records.get(i).get(j);
        //         image[i][j] = Integer.parseInt(s);
        //     }
            
        //     images.add(image);
        // }

        // for (int i = 0; i < kuvia.size(); i++) {
        //     for (int j = 0; j < kuvia.get(i).size(); j++) {
        //         System.out.print(kuvia.get(i).get(j)+ ", ");
        //     }
        //     System.out.println("");
        // }



        ///////////////////

        // for (int i = 0; i < images.size(); i++) {
        //     for (int j = 0; j < images.get(i).length; j++) {
        //         System.out.println(Arrays.deepToString(images.get(i)[i][j]));
        //     }
            
        // }

        // List<List<String>> records = new ArrayList<>();
        // try (Scanner scanner = new Scanner(new File("./data/mnist_test.csv"));) {
        //     while (scanner.hasNextLine()) {
        //         records.add(getRecordFromLine(scanner.nextLine()));
        // }
        // }




        // int numRows = 28;
        // int numColumns = 28;
        // int outputNum = 10;
        // int numSamples = 60000;
        // int batchsize=10;
        // DataSetIterator iter = new MnistDataSetIterator(100, 10000);//, true);
        // while (iter.hasNext()) {
        //     DataSet testMnist = iter.next();
        //     INDArray t = testMnist.getFeatures();
        //     System.out.println(t.toString());
        // }



        // int layerSize, int minibatch_size, int input_size
        
        nn.learnFromDataset(recordsValues, 30, 10, 0.1, validValues, recordsTestValues, validTestValues, 0.1);
        //nn.SGD(recordsValues, 2, 10, 0.002, validValues, recordsTestValues, validTestValues, 5.0);

        ////// ALLA OLEVA OSUUS ON TOIMIVAA
        // System.out.println(new App().getGreeting());

        
        //NeuralNetwork nn = new NeuralNetwork(2);
        NeuralNetwork3 nn2 = new NeuralNetwork3();
        nn2.setCostFunction(new MSE());

        // SigmoidDouble s = new SigmoidDouble(1.0);
        //IActivationFunction s = new Sigmoid();
        // System.out.println(s.calculate(10));

        // nn.addLayer(new Sigmoid(), 3, 0.2);
        Layer3 i = new Layer3(2, "i1", new Identity());

        Layer3 l22 = new Layer3(1, "o22", new Sigmoid());

        Layer3 l21 = new Layer3(3, "l21", new Sigmoid());

        i.setNextLayer(l21);
        l21.setWeightsFromMatrix(new double[][] {{0.05, 0.06}, {0.07, 0.08}, {0.09, 0.10}});
        l21.setBias(0.2);
        // System.out.println("l21 painot: ");
        l21.printWeights();
        l21.setNextLayer(l22);
        l22.setWeightsFromMatrix(new double[][] {{0.11},{0.12},{0.13}});
        l22.setBias(0.25);
        // System.out.println("l22 painot");
        l22.printWeights();

        nn2.addLayer(i);
        nn2.addLayer(l21);
        nn2.addLayer(l22);

        // //nn.feedInput(new double[]{0.1, 0.2});

        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});

        // nn.updateFromTraining();

        // for (int indeksi = 1; indeksi < nn.layers.size(); indeksi++) {
        //     Layer3 lll = nn.layers.get(indeksi);
    
        //     System.out.println("Kerroksen painot ennen päivitystä: " + lll.getWeightsMatrix().toString());
        //     lll.updateFromLearning();

        //     System.out.println("Kerroksen painot ennen päivitystä: " + lll.getWeightsMatrix().toString());
        //     System.out.println("Kerroksen painot päivityksen jälkeen: " + lll.weights.toString());

        //     //System.out.println("LLL painot "lll.getWeightsMatrix().toString());
        // }

        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});
        // nn.updateFromTraining();
        // System.out.println(nn.getLastLayer().getOutputMatrix());
        // nn.calculateError(new Matrix(new double[][] {{0.8}}), nn.getLastLayer().getOutputMatrix());

        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});
        // nn.updateFromTraining();
        // System.out.println(nn.getLastLayer().getOutputMatrix());
        // nn.calculateError(new Matrix(new double[][] {{0.8}}), nn.getLastLayer().getOutputMatrix());

        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});
        // nn.updateFromTraining();
        // System.out.println(nn.getLastLayer().getOutputMatrix());
        // nn.calculateError(new Matrix(new double[][] {{0.8}}), nn.getLastLayer().getOutputMatrix());


        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});
        // nn.updateFromTraining();
        // System.out.println(nn.getLastLayer().getOutputMatrix());
        // nn.calculateError(new Matrix(new double[][] {{0.8}}), nn.getLastLayer().getOutputMatrix());

        // nn.train(new double[]{0.1, 0.2}, new double[] {0.8});
        // nn.updateFromTraining();
        // System.out.println(nn.getLastLayer().getOutputMatrix());
        // nn.calculateError(new Matrix(new double[][] {{0.8}}), nn.getLastLayer().getOutputMatrix());

    }
}
